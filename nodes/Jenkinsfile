pipeline {
    agent {
        label 'master'
    }
    environment {
        test = "None"
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-jenkins-json')
        AZURE_SP_CERT_KEY = credentials('azure-sp-cert-no-pass')
        ARM_CLIENT_ID = credentials('azure-client-id')
        PRIVATE_KEY = credentials('chef-private-key')
        ARM_TENANT_ID = credentials('azure-sp-demo-tenant-id')
        ARM_SUBSCRIPTION_ID = credentials('azure-sp-demo-sub-id')
        ARM_CLIENT_CERTIFICATE_PATH = credentials('azure-sp-demo-cert-pass')
        ARM_CLIENT_CERTIFICATE_PASSWORD = ""
        ARM_ENVIRONMENT = "public"
        CHEF_TOKEN = credentials('chef-automate-api-token')
    }
    stages {
        stage('Fetch Infra Code') {
            steps {
                git(
                    url: 'https://github.com/Chambras/ChefConf2019.git',
                    credentialsId: 'chef-conf-github',
                    branch: 'dev'
                )
            }
        }
        stage('Initialize Node Folders') {
            steps {
                echo "Running init to check conectivity to remote state (AWS)"
                sh '''#!/bin/bash
                cd Terraform/AWS/TestNodes
                terraform init
                '''
                echo "Running init to check connectivity to remote state (Azure)"
                withCredentials([azureServicePrincipal('azure-sp-demo')]) {
                    sh '''#!/bin/bash
                    cd Terraform/Azure/TestNodes
                    terraform init
                    '''
                }
                echo "Running init to check connectivity to remote state (GCP)"
                sh '''#!/bin/bash
                cd Terraform/GCP/TestNodes
                terraform init
                '''
            }
        }
        stage('Refresh State') {
            steps {
                echo "Running refresh (AWS)"
                sh '''#!/bin/bash
                cd Terraform/AWS/TestNodes
                terraform refresh
                '''
                echo "Running refresh (Azure)"
                withCredentials([azureServicePrincipal('azure-sp-demo')]) {
                    sh '''#!/bin/bash
                    cd Terraform/Azure/TestNodes
                    terraform refresh
                    '''
                }
                echo "Running refresh (GCP)"
                sh '''#!/bin/bash
                cd Terraform/GCP/TestNodes
                terraform refresh
                '''
            }
        }
        stage('Output') {
            steps {
                script {
                    try {
                        echo "TF Output (AWS)"
                        sh '''#!/bin/bash
                        cd Terraform/AWS/TestNodes
                        terraform output
                        '''
                    } catch(err) {
                        echo "AWS has no infrastructure"
                    }
                }
                script {
                    try {
                        echo "TF Output (Azure)"
                        withCredentials([azureServicePrincipal('azure-sp-demo')]) {
                            sh '''#!/bin/bash
                            cd Terraform/Azure/TestNodes
                            terraform output
                            '''
                        }
                    } catch(err) {
                        echo "Azure has no infrastructure"
                    }
                }
                script {
                    try {
                        echo "TF Output (GCP)"
                        sh '''#!/bin/bash
                        cd Terraform/GCP/TestNodes
                        terraform output
                        '''
                    } catch(err) {
                        echo "GCP has no infrastructure"
                    }
                }
            }
        }
        stage('Build Nodes') {
            parallel {
                stage('AWS') {
                    steps {
                        echo "Running apply (AWS)"
                        sh '''#!/bin/bash
                        cd Terraform/AWS/TestNodes
                        terraform apply --auto-approve
                        '''
                    }
                }
                stage('Azure') {
                    steps {
                        echo "Running apply (Azure)"
                        withCredentials([azureServicePrincipal('azure-sp-demo')]) {
                            sh '''#!/bin/bash
                            cd Terraform/Azure/TestNodes
                            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_SP_CERT_KEY -t $AZURE_TENANT_ID
                            terraform apply --auto-approve
                            '''
                        }
                    }
                }
                stage('GCP') {
                    steps {
                        echo "Running apply (GCP)"
                        sh '''#!/bin/bash
                        cd Terraform/GCP/TestNodes
                        terraform apply --auto-approve
                        '''
                    }
                }
            }
        }
        stage('Bootstrap') {
            parallel {
                stage('AWS') {
                    steps {
                        echo "Bootstrapping AWS infra"
                        sh '''#!/bin/bash
                        cd Terraform/AWS/TestNodes
                        knife bootstrap $(terraform output public_ip_address) -x ec2-user -i $PRIVATE_KEY -N AWSServerTest -r 'chef-client,audit' --sudo --yes --no-host-key-verify
                        curl -s --insecure -H "api-token: $CHEF_TOKEN" https://chefconf2019v2.eastus.cloudapp.azure.com/api/v0/nodes/bulk-create -d '
                        {"nodes": [{
                            "name": "AWSServerTest",
                            "manager":"automate",
                            "target_config": {
                                "backend":"ssh",
                                "hosts":["'"$(terraform output public_ip_address)"'"],
                                "secrets":["2ced2fb8-b190-4e80-bb6e-6278b0ed7c1c"],
                                "port": 22
                            },
                            "tags": []
                            }
                        ]
                        }'
                        '''
                    }
                }
                stage('Azure') {
                    steps {
                        echo "Bootstrapping Azure Infra"
                        sh '''#!/bin/bash
                        cd Terraform/Azure/TestNodes
                        knife bootstrap $(terraform output public_ip_address) -x chefconf -i $PRIVATE_KEY -N AzureServerTest -r 'chef-client,audit' --sudo --yes --no-host-key-verify
                        curl -s --insecure -H "api-token: $CHEF_TOKEN" https://chefconf2019v2.eastus.cloudapp.azure.com/api/v0/nodes/bulk-create -d '
                        {"nodes": [{
                            "name": "AzureServerTest",
                            "manager":"automate",
                            "target_config": {
                                "backend":"ssh",
                                "hosts":["'"$(terraform output public_ip_address)"'"],
                                "secrets":["12762a4e-8f6f-434c-a71b-5465975ec36d"],
                                "port": 22
                            },
                            "tags": []
                            }
                        ]
                        }'
                        '''
                    }
                }
                stage('GCP') {
                    steps {
                        echo "Bootstrapping GCP infra"
                        sh '''#!/bin/bash
                        cd Terraform/GCP/TestNodes
                        knife bootstrap $(terraform output public_ip_address) -x chefconf -i $PRIVATE_KEY -N GCPServerTest -r 'chef-client,audit' --sudo --yes --no-host-key-verify
                        curl -s --insecure -H "api-token: $CHEF_TOKEN" https://chefconf2019v2.eastus.cloudapp.azure.com/api/v0/nodes/bulk-create -d '
                        {"nodes": [{
                            "name": "GCPServerTest",
                            "manager":"automate",
                            "target_config": {
                                "backend":"ssh",
                                "hosts":["'"$(terraform output public_ip_address)"'"],
                                "secrets":["12762a4e-8f6f-434c-a71b-5465975ec36d"],
                                "port": 22
                            },
                            "tags": []
                            }
                        ]
                        }'
                        '''
                    }
                }
            }
        }
    }
}